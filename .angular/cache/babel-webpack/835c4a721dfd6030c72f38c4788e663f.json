{"ast":null,"code":"//  // A MIME type is a label used to identify a type of data.\n//  // It is used so software can know how to handle the data.\n//  //  It serves the same purpose on the Internet that file extensions do on Microsoft Windows.\nimport { Observable, of } from 'rxjs'; // get value of control from file, read it, then check for mime type of file, validator is just a function\n// square brackets here indicate dynamic property name\n\nexport const mimeType = control => {\n  if (!control.value || typeof control.value === 'string') {\n    return of(null);\n  }\n\n  const file = control.value;\n  const fileReader = new FileReader(); // must subscribe to either promise or observable, here we create  our own observable from scratch, static create method\n  // observable takes function as arguement that gets an observer passed in by rxjs\n  // the observer is a tool used to control when observable emits new data\n\n  const frObs = Observable.create(observer => {\n    fileReader.addEventListener('loadend', () => {\n      // creates a new array of 8 bit unsigned integers, as a way to allow us access or\n      // read certain patterns in pattern and meta data to parse mime type we dont just want to check extension\n      // we want to infer file type by looking into the file and Uint arrow allows us to do this,\n      // also why we wrap it in there as an array buffer because we can concert it\n      const arr = new Uint8Array(fileReader.result).subarray(0, 4);\n      let header = ''; // asssume file is not valid here change to true if it is valid\n\n      let isValid = false; // building string of hexidecimal values\n      // tslint:disable-next-line: prefer-for-of\n      // to really get the file type we need to read the pattern with a for loop\n      // tslint:disable-next-line: prefer-for-of\n\n      for (let i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n\n      switch (header) {\n        case '89504e47':\n          isValid = true;\n          break;\n\n        case 'ffd8ffe0':\n        case 'ffd8ffe1':\n        case 'ffd8ffe2':\n        case 'ffd8ffe3':\n        case 'ffd8ffe8':\n          isValid = true;\n          break;\n\n        default:\n          isValid = false; // Or you can use the blob.type as fallback\n\n          break;\n      }\n\n      if (isValid) {\n        // call observer next emit new value from observer of null, have to return (omit in observable)\n        // null if it is valid\n        observer.next(null);\n      } else {\n        observer.next({\n          invalidMimeType: true\n        });\n      } // let any subscribers know we are done\n\n\n      observer.complete();\n    });\n    fileReader.readAsArrayBuffer(file);\n  });\n  return frObs;\n};","map":null,"metadata":{},"sourceType":"module"}