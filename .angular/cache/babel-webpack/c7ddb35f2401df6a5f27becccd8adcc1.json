{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiURL + '/user/';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false; // this subject will push authentication information to the components interested\n\n      this.authStatusListening = new Subject();\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n\n    getAuthStatusListener() {\n      return this.authStatusListening.asObservable();\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    createUser(email, password) {\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(BACKEND_URL + \"/signup\", authData).subscribe(response => {\n        console.log(response);\n      });\n      this.router.navigate(['/auth/login']);\n    }\n\n    login(email, password) {\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(BACKEND_URL + \"login\", authData).subscribe(response => {\n        const token = response.token;\n        this.token = token;\n\n        if (token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.userId = response.userId;\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n          console.log(expirationDate);\n          this.saveAuthData(token, expirationDate, this.userId);\n          this.authStatusListening.next(true); // this.router.navigate(['/dashBoard']);\n        }\n      });\n    }\n\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n\n      if (!authInformation) {\n        return;\n      }\n\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.userId = authInformation.userId;\n        this.setAuthTimer(expiresIn / 1000);\n        this.authStatusListening.next(true);\n      }\n    }\n\n    logout() {\n      this.token = null;\n      this.isAuthenticated = false; // pass information\n\n      this.authStatusListening.next(false);\n      this.router.navigate(['/']);\n      this.userId = null;\n      this.clearAuthData();\n      clearTimeout(this.tokenTimer);\n    }\n\n    setAuthTimer(duration) {\n      console.log('setting timer: ' + duration);\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    } // store data to local storange so you dont have to log in every time the page refreshes\n\n\n    saveAuthData(token, expirationDate, userId) {\n      localStorage.setItem('token', token), localStorage.setItem('expiration', expirationDate.toISOString());\n      localStorage.setItem('userId', userId);\n    }\n\n    clearAuthData() {\n      localStorage.removeItem('token'), localStorage.removeItem('expiration');\n      localStorage.removeItem('userId');\n    }\n\n    getAuthData() {\n      const token = localStorage.getItem('token');\n      const expirationDate = localStorage.getItem('expiration');\n      const userId = localStorage.getItem('userId');\n\n      if (!token && !expirationDate) {\n        return;\n      }\n\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate),\n        userId: userId\n      };\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}