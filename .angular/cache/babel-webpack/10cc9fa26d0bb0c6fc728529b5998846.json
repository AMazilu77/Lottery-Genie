{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LuckyNumberPostService } from '../../../../services/luckyNumberPost.service'; // activated route object gives us important information about the route we're on\n\nimport { ActivatedRoute } from '@angular/router';\nimport { mimeType } from './mime-type.validator';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../services/luckyNumberPost.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/auth/auth.service\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/progress-spinner\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\n\nfunction CreateLuckyNumberComponent_mat_spinner_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction CreateLuckyNumberComponent_form_6_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please Enter Your Lucky Number \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateLuckyNumberComponent_form_6_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r4.imagePreview, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r4.form.value.numberSelected);\n  }\n}\n\nfunction CreateLuckyNumberComponent_form_6_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" You do not have to enter a reason, its weird that you got this error.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateLuckyNumberComponent_form_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"submit\", function CreateLuckyNumberComponent_form_6_Template_form_submit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onSaveLuck();\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 3);\n    i0.ɵɵtemplate(3, CreateLuckyNumberComponent_form_6_mat_error_3_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function CreateLuckyNumberComponent_form_6_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r7);\n\n      const _r3 = i0.ɵɵreference(8);\n\n      return _r3.click();\n    });\n    i0.ɵɵtext(6, \" Pick Image \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"input\", 5, 6);\n    i0.ɵɵlistener(\"change\", function CreateLuckyNumberComponent_form_6_Template_input_change_7_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onImagePick($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CreateLuckyNumberComponent_form_6_div_9_Template, 2, 2, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-form-field\");\n    i0.ɵɵelementStart(11, \"textarea\", 8);\n    i0.ɵɵtext(12, \" \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, CreateLuckyNumberComponent_form_6_mat_error_13_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 9);\n    i0.ɵɵtext(15, \" Save \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"numberSelected\").invalid);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.imagePreview !== \"\" && ctx_r1.imagePreview && ctx_r1.form.get(\"image\").valid);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"reasoning\").invalid);\n  }\n}\n\nexport let CreateLuckyNumberComponent = /*#__PURE__*/(() => {\n  class CreateLuckyNumberComponent {\n    constructor(luckyNumberService, route, authService) {\n      this.luckyNumberService = luckyNumberService;\n      this.route = route;\n      this.authService = authService;\n      this.enteredValue = '';\n      this.enteredReason = '';\n      this.isLoading = false;\n      this.mode = 'create';\n    } // postCreated = new EventEmitter<LuckyNumberModel>();\n\n\n    ngOnInit() {\n      // set up and subscribe to listener\n      this.authStatusSub = this.authService.getAuthStatusListener().subscribe(authStatus => {\n        // whenever auth status changes, the laoder is disabled\n        this.isLoading = false;\n      }); // initialize form group which tracks the value and validity state of a group of FormControl instances.\n\n      this.form = new FormGroup({\n        // FormControl Tracks the value and validation status of an individual form control.\n        // validators is an array of validators we want to add, first value null, is starting value\n        numberSelected: new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(1)]\n        }),\n        reasoning: new FormControl(null, {\n          validators: [Validators.nullValidator]\n        }),\n        image: new FormControl(null, {\n          validators: [Validators.nullValidator],\n          asyncValidators: [mimeType]\n        })\n      }); // find out if we have a postId paramater using built-in paramMap observable\n\n      this.route.paramMap.subscribe(paramMap => {\n        // check to see if the URL has a post ID\n        if (paramMap.has('postId')) {\n          this.mode = 'edit'; // extract post ID\n\n          this.postId = paramMap.get('postId');\n          this.isLoading = true; // fetch information about the post we are editing from the post service\n\n          this.luckyNumberService.getPost(this.postId).subscribe(postData => {\n            this.isLoading = false; // information coming from the database\n\n            this.post = {\n              id: postData._id,\n              numberSelected: postData.numberSelected,\n              reasoning: postData.reasoning,\n              imagePath: postData.imagePath,\n              creator: postData.creator\n            };\n            this.form.setValue({\n              numberSelected: this.post.numberSelected,\n              reasoning: this.post.reasoning,\n              image: this.post.imagePath\n            });\n          });\n        } else {\n          this.mode = 'create';\n          this.postId = null;\n        }\n      });\n    } // listens for event of file picked in file picker and then creates an image preview\n\n\n    onImagePick(event) {\n      // performs type conversion to tell typescript the HTLM element has an array of files, the first being the one the user selected\n      const file = event.target.files[0];\n      this.form.patchValue({\n        image: file\n      }); // informs angular the value has been changes and need to be re-evaluated and is valid\n\n      this.form.get('image').updateValueAndValidity(); // convert to data url which is a data  that can be used by image tag\n\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      };\n\n      reader.readAsDataURL(file);\n    }\n\n    onSaveLuck() {\n      if (this.form.invalid) {\n        return;\n      }\n\n      this.isLoading = true;\n\n      if (this.mode === 'create') {\n        this.luckyNumberService.addPost(this.form.value.numberSelected, this.form.value.reasoning, null || this.form.value.image);\n      } else {\n        this.luckyNumberService.updatePost(this.postId, this.form.value.numberSelected, this.form.value.reasoning, null || this.form.value.image);\n      }\n\n      this.form.reset();\n    }\n\n    ngOnDestroy() {\n      this.authStatusSub.unsubscribe();\n    }\n\n  }\n\n  CreateLuckyNumberComponent.ɵfac = function CreateLuckyNumberComponent_Factory(t) {\n    return new (t || CreateLuckyNumberComponent)(i0.ɵɵdirectiveInject(i1.LuckyNumberPostService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n\n  CreateLuckyNumberComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateLuckyNumberComponent,\n    selectors: [[\"app-create-lucky-number\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [3, \"formGroup\", \"submit\", 4, \"ngIf\"], [3, \"formGroup\", \"submit\"], [\"matInput\", \"\", \"formControlName\", \"numberSelected\", \"type\", \"number\", \"placeholder\", \"Enter only Numbers here\", \"name\", \"numberSelected\", 1, \"createLuck\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"type\", \"file\", 3, \"change\"], [\"pickFile\", \"\"], [\"class\", \"image-preview\", 4, \"ngIf\"], [\"matInput\", \"\", \"rows\", \"6\", \"formControlName\", \"reasoning\", \"placeholder\", \"What is the significance of this number?\", \"name\", \"reasoning\"], [\"mat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"], [1, \"image-preview\"], [3, \"src\", \"alt\"]],\n    template: function CreateLuckyNumberComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"h4\");\n        i0.ɵɵtext(2, \" Save Lucky Number Post\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \" Save your lucky numbers, or pictures of the numbers you want to play later.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, CreateLuckyNumberComponent_mat_spinner_5_Template, 1, 0, \"mat-spinner\", 0);\n        i0.ɵɵtemplate(6, CreateLuckyNumberComponent_form_6_Template, 16, 4, \"form\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      }\n    },\n    directives: [i4.MatCard, i5.NgIf, i6.MatSpinner, i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.FormGroupDirective, i8.MatFormField, i9.MatInput, i7.DefaultValueAccessor, i7.NumberValueAccessor, i7.NgControlStatus, i7.FormControlName, i10.MatButton, i8.MatError],\n    styles: [\"mat-card[_ngcontent-%COMP%]{width:80%;margin:auto;background-color:#696774}mat-form-field[_ngcontent-%COMP%], text-area[_ngcontent-%COMP%]{width:100%;color:#000}h4[_ngcontent-%COMP%]{color:silver}input[type=file][_ngcontent-%COMP%]{visibility:hidden}.image-preview[_ngcontent-%COMP%]{height:5rem;margin:1rem 0}.image-preview[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{height:100%}.createLuck[_ngcontent-%COMP%]{color:#000}\"]\n  });\n  return CreateLuckyNumberComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}