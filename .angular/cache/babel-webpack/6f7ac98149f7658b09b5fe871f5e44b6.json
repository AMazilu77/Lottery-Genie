{"ast":null,"code":"import { HttpErrorResponse, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ErrorComponent } from './error/error.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\"; // manipulate incoming request \n\nexport let ErrorIntercept = /*#__PURE__*/(() => {\n  class ErrorIntercept {\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n\n    intercept(req, next) {\n      // handle method gives back the response observerable stream\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = 'An unknown error occured.';\n\n        if (error.error.message) {\n          errorMessage = error.error.message;\n        }\n\n        this.dialog.open(ErrorComponent, {\n          data: {\n            message: errorMessage\n          }\n        });\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorIntercept.ɵfac = function ErrorIntercept_Factory(t) {\n    return new (t || ErrorIntercept)(i0.ɵɵinject(i1.MatDialog));\n  };\n\n  ErrorIntercept.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorIntercept,\n    factory: ErrorIntercept.ɵfac\n  });\n  return ErrorIntercept;\n})();","map":null,"metadata":{},"sourceType":"module"}