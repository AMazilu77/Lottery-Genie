{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiURL + '/posts/';\nexport let LuckyNumberPostService = /*#__PURE__*/(() => {\n  class LuckyNumberPostService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n\n    getPosts(postsPerPage, currentPage) {\n      // js feature allows you to dynamically add values into a normal string with backticks\n      const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n      this.http // updated post array and max posts\n      .get(BACKEND_URL + queryParams).pipe(map(postData => {\n        return {\n          posts: postData.posts.map(post => {\n            return {\n              numberSelected: post.numberSelected,\n              reasoning: post.reasoning,\n              id: post._id,\n              imagePath: post.imagePath,\n              creator: post.creator\n            };\n          }),\n          maxPosts: postData.maxPosts\n        };\n      })) // has posts property which holds posts, but also has the max posts info\n      .subscribe(transformedPostData => {\n        console.log(transformedPostData);\n        this.posts = transformedPostData.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts\n        });\n      });\n    }\n\n    getPostUpdateListener() {\n      return this.postsUpdated.asObservable();\n    } // getting post to edit a single post from list of posts\n\n\n    getPost(id) {\n      // subscribe to observable\n      return this.http.get(BACKEND_URL + id);\n    } // ****  addPost is the ADD LUCKY NUMBER POST FUNCTION - change to number to string ***\n\n\n    addPost(numberSelected, reasoning, image) {\n      // sending form data instead of JSON, data format to combine text and file values\n      const postData = new FormData();\n      postData.append('numberSelected', numberSelected);\n      postData.append('reasoning', reasoning);\n\n      if (image === null) {\n        postData.append('image', numberSelected);\n        console.log('no image');\n      } else {\n        postData.append('image', image, numberSelected);\n      }\n\n      this.http.post(BACKEND_URL, postData).subscribe(responseData => {\n        this.router.navigate(['/dashBoard']);\n      });\n    } // **** UPDATE LUCKY NUMBER POST FUNCTION - changed number selected to string ***\n\n\n    updatePost(id, numberSelected, reasoning, image) {\n      let postData;\n\n      if (typeof image === \"object\") {\n        postData = new FormData();\n        postData.append(\"id\", id);\n        postData.append(\"numberSelected\", numberSelected);\n        postData.append(\"reasoning\", reasoning); // postData.append(\"image\", image, numberSelected);\n\n        if (image === null) {\n          postData.append('image', numberSelected);\n          console.log('no image');\n        } else {\n          postData.append('image', image, numberSelected);\n        }\n      } else {\n        postData = {\n          id: id,\n          numberSelected: numberSelected,\n          reasoning: reasoning,\n          imagePath: image || null,\n          creator: null\n        };\n      }\n\n      this.http.put(BACKEND_URL + id, postData).subscribe(response => {\n        this.router.navigate([\"/profile\"]);\n      });\n    }\n\n    deletePost(postId) {\n      return this.http.delete(BACKEND_URL + postId);\n    }\n\n  }\n\n  LuckyNumberPostService.ɵfac = function LuckyNumberPostService_Factory(t) {\n    return new (t || LuckyNumberPostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  LuckyNumberPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LuckyNumberPostService,\n    factory: LuckyNumberPostService.ɵfac,\n    providedIn: 'root'\n  });\n  return LuckyNumberPostService;\n})();","map":null,"metadata":{},"sourceType":"module"}